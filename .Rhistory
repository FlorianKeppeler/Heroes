group
imp_names[[group_type]]
imp_names[[group_type]][group_index]
group_names = imp_names[[group_type]][group_index]
# skalen_subsets
score_type = "scores_fact"
score_name = "Beziehung.2"
group_index = c(2,3)
group_type = "B102"
group_names = imp_names[[group_type]][group_index]
tmp = data[,pred_var]
tmp[!complete.cases(tmp),] = NA
scores = skalen_scores[[score_name]][[score_type]]
tmp_scores = cbind(scores, tmp)
m = length(group_index)
group = list()
for(i in 1:m){
group[[i]] = tmp_scores[tmp_scores[,group_type] == group_index[i], 1]
}
source("C:/Heroes/Funktionen.R")
dist_plot(group = group, n=1, m=length(group_index), n_group = 1, data_type="continous")
group
group = list()
for(i in 1:m){
group[[i]] = data.frame("score"=tmp_scores[tmp_scores[,group_type] == group_index[i], 1])
}
group
dist_plot(group = group, n=1, m=length(group_index), n_group = 1, data_type="continous")
group
group = group
n=1
m=length(group_index)
n_group = 1
data_type="continous"
dist_plot(group = group, n=1, m=length(group_index), n_group = 2, data_type="continous")
dist_plot(group = group, n=1, m=length(group_index), n_group = 1, data_type="continous")
res = matrix(0, n_group, n_group)
res
dist_plot(group = group, n=1, m=length(group_index), n_group = 2, data_type="continous")
dist_plot(group = group, n=1, m=length(group_index), n_group = length(group_index), data_type="continous")
n_group = length(group_index)
res = matrix(0, n_group, n_group)
res
for(i in 1:n_group){
for(j in 1:n_group){
if(i!=j){
if( i < j){ # unteres dreieck
res[i,j] = round(item_abs(group1 = group[[i]], group2 = group[[j]], n, m, data_type), 3)
}
if(i > j){ # oberes dreieck
if(length(unique(group[[i]][,n]))>1 | length(unique(group[[j]][,n]))>1){
res[i,j] = round(t.test(group[[i]][,n], group[[j]][,n])$p.value,3)
}else{
if(length(unique(group[[i]][,n]))<=1 & length(unique(group[[j]][,n]))<=1){
if(unique(group[[i]][,n]) != unique(group[[j]][,n])){
res[i,j] = 0 # komplett unterschiedlich wenn nur eine Kategorie gewÃ¤hlt, aber unterschiedliche
}else{
res[i,j] = 1 # komplett gleich
}
}
}
}
}else{ # diagonale
res[i,j] = round(mean(group[[i]][,n]),3)
# res[i,j] = median(group[[i]][,n])
}
}
}
i
j
i
i!=j
i < j
item_abs(group1 = group[[i]], group2 = group[[j]], n, m, data_type)
group[[i]]
group[[j]]
cor_plot(group = group, n=1, m=length(group_index), n_group = length(group_index), data_type="continous")
source("C:/Heroes/Funktionen.R")
cor_plot(group = group, n=1, m=length(group_index), n_group = length(group_index), data_type="continous")
res = matrix(0, n_group, n_group)
cor_plot(group = group, n=1, m=length(group_index), n_group = length(group_index))
res = matrix(0, n_group, n_group)
res
cor(group[[i]], group[[j]]
)
t_plot(group = group, n=1, m=length(group_index), n_group = length(group_index))
t_plot(group = group, n=1, m=length(group_index))
t_plot(group = group, n=2, m=length(group_index))
t_plot(group = group, n=1, m=length(group_index))
source("C:/Heroes/Funktionen.R")
t_plot(group = group, n=1, m=length(group_index))
res = matrix(0, m, m)
res
for(i in 1:m){
for(j in 1:m){
if(i!=j){
res[i,j] = round(t.test(group[[i]][,n], group[[j]][,n])$p.value,3)
}else{
res[i,j] = round(mean(group[[i]][,n]),3)
}
}
}
res
t.test(group[[i]][,n], group[[j]][,n])$p.value
i!=j
mean(group[[i]][,n])
group[[i]]
for(i in 1:m){
for(j in 1:m){
if(i!=j){
res[i,j] = round(t.test(group[[i]][,n], group[[j]][,n])$p.value,3)
}else{
res[i,j] = round(mean(group[[i]][,n], na.rm=T),3)
}
}
}
res
diag(res2) = NA
res2[lower.tri(res2)] = NA
res2 = res
diag(res2) = NA
res2[lower.tri(res2)] = NA
tmp = res2[upper.tri(res2)]
tmp = ifelse(tmp <= 0.01, 4, ifelse(tmp <= 0.05, 3, ifelse(tmp <= 0.1, 2, 1)))
res2[upper.tri(res2)] = tmp
image(res2, breaks = c(0, 1, 2, 3, 4),
zlim=c(0,1),
col=rev(c("grey10","grey50","grey80","white")),
useRaster = FALSE,
xaxt="n", yaxt="n",
main=names(group[[1]])[n])
axis(1, at = seq(0,1, length.out=m), labels=names(group), las=3)
axis(2, at = seq(0,1, length.out=m), labels=names(group), las=2)
for(i in 1:m){
for(j in 1:m){
# if(i == j) text((i-1)/4,(j-1)/4, diag(res)[i])
# if(i < j) text((i-1)/4,(j-1)/4, res[i,j])
text(seq(0,1, length.out=m)[i], seq(0,1, length.out=m)[j], res[i,j])
}
abline(v=(i-1)/(m-1)-(1/((m-1)*2)))
abline(h=(i-1)/(m-1)+(1/((m-1)*2)))
}
res2 = res
diag(res2) = NA
# res2[lower.tri(res2)] = NA
tmp = res2[upper.tri(res2)]
tmp
tmp = ifelse(tmp <= 0.01, 4, ifelse(tmp <= 0.05, 3, ifelse(tmp <= 0.1, 2, 1)))
tmp
res2 = res
diag(res2) = NA
res2 = ifelse(res2 <= 0.01, 4, ifelse(res2 <= 0.05, 3, ifelse(res2 <= 0.1, 2, 1)))
image(res2, breaks = c(0, 1, 2, 3, 4),
zlim=c(0,1),
col=rev(c("grey10","grey50","grey80","white")),
useRaster = FALSE,
xaxt="n", yaxt="n",
main=names(group[[1]])[n])
axis(1, at = seq(0,1, length.out=m), labels=names(group), las=3)
axis(2, at = seq(0,1, length.out=m), labels=names(group), las=2)
for(i in 1:m){
for(j in 1:m){
# if(i == j) text((i-1)/4,(j-1)/4, diag(res)[i])
# if(i < j) text((i-1)/4,(j-1)/4, res[i,j])
text(seq(0,1, length.out=m)[i], seq(0,1, length.out=m)[j], res[i,j])
}
abline(v=(i-1)/(m-1)-(1/((m-1)*2)))
abline(h=(i-1)/(m-1)+(1/((m-1)*2)))
}
group[[i]] = data.frame(score_name=tmp_scores[tmp_scores[,group_type] == group_index[i], 1])
group
group = list()
for(i in 1:m){
group[[i]] = data.frame(score_name=tmp_scores[tmp_scores[,group_type] == group_index[i], 1])
}
t_plot(group = group, n=1, m=length(group_index))
score_name
group[[i]] = data.frame(eval(score_name)=tmp_scores[tmp_scores[,group_type] == group_index[i], 1])
eval(score_name)
group_names[i]
source("C:/Heroes/Funktionen.R")
group = list()
for(i in 1:m){
group[[group_names[i]]] = data.frame(tmp_scores[tmp_scores[,group_type] == group_index[i], 1])
}
t_plot(group = group, n=1, m=length(group_index))
t_plot(group = group, n=1, m=length(group_index), main=paste(score_name, "-", group_type))
t_plot(group = group, n=1, m=length(group_index), main=paste(score_name, "-", group_type, "-", score_type))
check_skalen_by_group(data=data, skalen_scores=skalen_scores, pred_var=pred_var,
score_type = "scores_fact", score_name = "Beziehung.2",
group_type = "B102", group_index = c(2,3), group_names = imp_names)
source("C:/Heroes/Funktionen.R")
check_skalen_by_group(data=data, skalen_scores=skalen_scores, pred_var=pred_var,
score_type = "scores_fact", score_name = "Beziehung.2",
group_type = "B102", group_index = c(2,3), group_names = imp_names)
source("C:/Heroes/Funktionen.R")
check_skalen_by_group(data=data, skalen_scores=skalen_scores, pred_var=pred_var,
score_type = "scores_fact", score_name = "Beziehung.2",
group_type = "B102", group_index = c(2,3), group_names = imp_names)
check_skalen_by_group(data=data, skalen_scores=skalen_scores, pred_var=pred_var,
score_type = "scores_fact", score_name = "Beziehung.1",
group_type = "B102", group_index = c(2,3), group_names = imp_names)
check_skalen_by_group(data=data, skalen_scores=skalen_scores, pred_var=pred_var,
score_type = "scores_mean", score_name = "Beziehung.1",
group_type = "B102", group_index = c(2,3), group_names = imp_names)
pred_var
check_skalen_by_group(data=data, skalen_scores=skalen_scores, pred_var=pred_var,
score_type = "scores_mean", score_name = "Beziehung.1",
group_type = "B103", group_index = c(1,2,3), group_names = imp_names)
check_skalen_by_group(data=data, skalen_scores=skalen_scores, pred_var=pred_var,
score_type = "scores_mean", score_name = "Beziehung.2",
group_type = "B103", group_index = c(1,2,3), group_names = imp_names)
check_skalen_by_group(data=data, skalen_scores=skalen_scores, pred_var=pred_var,
score_type = score_type, score_name = score_name,
group_type = "B105", group_index = c(1,2,3), group_names = imp_names)
check_skalen_by_group(data=data, skalen_scores=skalen_scores, pred_var=pred_var,
score_type = score_type, score_name = score_name,
group_type = "B110", group_index = c(1,2,3), group_names = imp_names)
par(mfrow=c(2,2))
check_skalen_by_group(data=data, skalen_scores=skalen_scores, pred_var=pred_var,
score_type = score_type, score_name = score_name,
group_type = "B102", group_index = c(2,3), group_names = imp_names)
check_skalen_by_group(data=data, skalen_scores=skalen_scores, pred_var=pred_var,
score_type = score_type, score_name = score_name,
group_type = "B103", group_index = c(1,2,3), group_names = imp_names)
check_skalen_by_group(data=data, skalen_scores=skalen_scores, pred_var=pred_var,
score_type = score_type, score_name = score_name,
group_type = "B105", group_index = c(1,2,3), group_names = imp_names)
check_skalen_by_group(data=data, skalen_scores=skalen_scores, pred_var=pred_var,
score_type = score_type, score_name = score_name,
group_type = "B110", group_index = c(1,2,3), group_names = imp_names)
check_skalen(data=data, skalen_scores=skalen_scores, pred_var=pred_var,
score_type = score_type, score_name = score_name, group_names = imp_names)
source("C:/Heroes/Funktionen.R")
check_skalen(data=data, skalen_scores=skalen_scores, pred_var=pred_var,
score_type = score_type, score_name = score_name, group_names = imp_names)
check_skalen(data=data, skalen_scores=skalen_scores, pred_var=pred_var,
score_type = score_type, score_name = score_name, group_names = imp_names)
source("C:/Heroes/Funktionen.R")
check_skalen(data=data, skalen_scores=skalen_scores, pred_var=pred_var,
score_type = score_type, score_name = score_name, group_names = imp_names)
skalen_names
check_skalen(data=data, skalen_scores=skalen_scores, variables=skalen_names[1:12],
pred_var=pred_var, score_type = score_type,
score_name = score_name, group_names = imp_names)
source("C:/Heroes/Funktionen.R")
check_skalen(data=data, skalen_scores=skalen_scores, variables=skalen_names[1:12],
pred_var=pred_var, score_type = score_type,
score_name = score_name, group_names = imp_names)
# skalen_subsets
score_type = "scores_mean"
check_skalen(data=data, skalen_scores=skalen_scores, variables=skalen_names[1:12],
pred_var=pred_var, score_type = score_type,
score_name = score_name, group_names = imp_names)
source("C:/Heroes/Funktionen.R")
check_skalen(data=data,
skalen_scores=skalen_scores,
variables=skalen_names,
pred_var=pred_var,
score_type = "scores_fact",
group_names = imp_names)
source("C:/Heroes/Funktionen.R")
check_skalen(data=data,
skalen_scores=skalen_scores,
variables=skalen_names,
pred_var=pred_var,
score_type = "scores_fact",
group_names = imp_names)
check_skalen(data=data,
skalen_scores=skalen_scores,
variables=skalen_names,
pred_var=pred_var,
score_type = "scores_fact",
group_names = imp_names)
data=data
skalen_scores=skalen_scores
variables=skalen_names
pred_var=pred_var
score_type = "scores_fact"
group_names = imp_names
is.na(skalen_scores[[score_name]][[p]])
skalen_scores[[score_name]]
skalen_scores[[score_name]][[p]]
is.na(skalen_scores[[score_name]][["p"]])
source("C:/Heroes/Funktionen.R")
check_skalen(data=data,
skalen_scores=skalen_scores,
variables=skalen_names,
pred_var=pred_var,
score_type = "scores_fact",
group_names = imp_names)
is.na(skalen_scores[[score_name]][["p"]])
skalen_scores$Beziehung.4$p
skalen_scores$Beziehung.4
skalen_scores = get_skalen_scores(data = data,
skalen = skalen,
skalen_names =  names(skalen))
skalen_scores$Beziehung.4
data = data
skalen = skalen
skalen_names = "Beziehung.4"
skalen_scores = list()
1:length(skalen_names)
i=1
tmp_ls = list()
tmp = data[,skalen[[skalen_names[i]]]]
na_index = complete.cases(tmp)
na_index
tmp
is.null(dim(tmp))
tmp = tmp[na_index,]
tmp_na = rep(NA, length(na_index))
tmp_na[na_index] = as.numeric(apply(tmp, 1, mean, na.rm=T))
tmp_ls[["scores_mean"]] = tmp_na
tmp_ls[["scores_mean"]]
ncol(tmp) < 3
tmp_jittered = apply(tmp, 2, jitter, factor = 0.01)
fact = factanal(tmp_jittered, 1, scores = "regression")
tmp_na[na_index] = fact$scores
tmp_na
fact$loadings
fact$PVAL
fact
score_name
score_name = "Beziehung.4"
skalen_scores[[score_name]][["p"]]
is.null(skalen_scores[[score_name]][["p"]])
source("C:/Heroes/Funktionen.R")
check_skalen(data=data,
skalen_scores=skalen_scores,
variables=skalen_names,
pred_var=pred_var,
score_type = "scores_fact",
group_names = imp_names)
source("C:/Heroes/Funktionen.R")
check_skalen(data=data,
skalen_scores=skalen_scores,
variables=skalen_names,
pred_var=pred_var,
score_type = "scores_fact",
group_names = imp_names)
source("C:/Heroes/Funktionen.R")
check_skalen(data=data,
skalen_scores=skalen_scores,
variables=skalen_names,
pred_var=pred_var,
score_type = "scores_fact",
group_names = imp_names)
skalen_names
check_skalen(data=data,
skalen_scores=skalen_scores,
variables=names(skalen),
pred_var=pred_var,
score_type = "scores_fact",
group_names = imp_names)
names(skalen)
check_skalen(data=data,
skalen_scores=skalen_scores,
variables=names(skalen)[1:12],
pred_var=pred_var,
score_type = "scores_fact",
group_names = imp_names)
source("C:/Heroes/Funktionen.R")
source("C:/Heroes/keys.R")
data = import_data_surv(Path="C:/Heroes/Downloads soscisurvey/CSV/data_HerOEs_2023-08-27_16-42.csv")
# check_items_by_group(data = data,
#                      variables = names(keys),
#                      group_index = list(1,2,c(3,4,5),3,c(4,5)),
#                      group_names = imp_names[["B102_edit"]][1:5])
skalen_scores = get_skalen_scores(data = data,
skalen = skalen,
skalen_names =  names(skalen))
check_skalen(data=data,
skalen_scores=skalen_scores,
variables=names(skalen)[1:12],
pred_var=pred_var,
score_type = "scores_fact",
group_names = imp_names)
check_skalen(data=data,
skalen_scores=skalen_scores,
variables=names(skalen),
pred_var=pred_var,
score_type = "scores_fact",
group_names = imp_names)
check_skalen(data=data,
skalen_scores=skalen_scores,
variables=best,
pred_var=pred_var,
score_type = "scores_mean",
group_names = imp_names)
source("C:/Heroes/Funktionen.R")
source("C:/Heroes/keys.R")
library(randomForest)
data = import_data_surv(Path="C:/Heroes/Downloads soscisurvey/CSV/data_HerOEs_2023-08-27_16-42.csv")
# check_items_by_group(data = data,
#                      variables = names(keys),
#                      group_index = list(1,2,c(3,4,5),3,c(4,5)),
#                      group_names = imp_names[["B102_edit"]][1:5])
#
#
# check_items_by_group(data = data,
#                      variables = "Krisenauf",
#                      group_index = list(1,2,c(3,4,5),3,c(4,5)),
#                      group_names = imp_names[["B102_edit"]][1:5])
# -> auf Skalenebene ists interessanter
skalen_scores = get_skalen_scores(data = data,
skalen = skalen2_ohne,
skalen_names =  names(skalen2_ohne))
# skalen ordnen -> wichtigste HaltekrÃ¤fte nach Umfragewert
plot_skalen_imp(create_skalen_imp(score_type = "scores_mean",
skalen_scores = skalen_scores), mar=c(8,3,1,1))
#
# check_skalen(data=data,
#              skalen_scores=skalen_scores,
#              variables=names(skalen),
#              pred_var=pred_var,
#              score_type = "scores_mean",
#              group_names = imp_names)
#
# check_skalen(data=data,
#              skalen_scores=skalen_scores,
#              variables="Paed.Halt.2",
#              pred_var=pred_var,
#              score_type = "scores_mean",
#              group_names = imp_names)
# Faktorladungen pro Skala
check_loadings(skalen_scores)
# wichtigste Haltekraft nach Abgleich mit tatsÃ¤chlicher Haltekraft
ums_data = create_ums_data(data, umsetzung)
ums_proz = create_ums_proz(skalen2_ohne, umsetzung, ums_data)
skalen_imp = create_skalen_imp(score_type = "scores_mean",
skalen_scores = skalen_scores)
merged_imp = merge(skalen_imp, ums_proz, by.x = "Name", by.y="Skalen")
merged_imp = merged_imp[order(merged_imp[,"Wert"], decreasing = T),]
# Gemeinsame Darstellung: Skalen_scores und Umsetzung
plot_skalen_imp(merged_imp, mar=c(8,3,1,3))
offset = 1
arrows(x0 = 1:nrow(merged_imp)+0.05, x1 = 1:nrow(merged_imp)+0.05,
y0 = rep(offset, nrow(merged_imp)),  y1 = offset + merged_imp[,3]*max(merged_imp[,2]-offset),
length=0, col="grey20", lwd=3)
axis(4, at = c(offset, (max(merged_imp[,2]) + offset)/2, max(merged_imp[,2])), labels = c(0, 0.5, 1))
abline(h=offset, lty=2)
ums_scores = get_skalen_scores(data = ums_data,
skalen = skalen2,
skalen_names =  names(skalen2))
plot_skalen_imp(create_skalen_imp(score_type = "scores_mean",
skalen_scores = ums_scores), mar=c(8,3,1,1))
# plot_skalen_imp(compare_skalen_ums(skalen_scores, ums_scores, score_type = "scores_mean"))
# Random Forest Analyse
ums_df = create_model_df(ums_scores, score_type = "scores_mean")
rfm = randomForest(Haltekraft ~ ., data = ums_df)
# was sind die wichtigsten HaltekrÃ¤fte?
par(mar=c(4,3,4,1))
rfm_import = varImpPlot(rfm)
# was sind die wichtigsten 10?
tmp_names = names(rfm_import[,1])
tmp_names[order(rfm_import, decreasing = T)]
best = tmp_names[order(rfm_import, decreasing = T)][1:10]
par(mar=c(7,7,4,2), mfrow=c(2,2))
for(i in best){
check_skalen_by_group(data=data, skalen_scores=skalen_scores, pred_var=pred_var,
score_type = "scores_mean", score_name = i,
group_type = "B102", group_index = list(1,2,c(3,4,5),3,c(4,5)), group_names = imp_names[["B102_edit"]])
}
# gibt es negative ZusammenhÃ¤nge?
par(mfrow=c(2,2))
for(i in best){
partialPlot(rfm, x.var = paste(i), pred.data = ums_df)
}
# nein!
# Welche Einrichtungen haben bei den wichtigsten ein Umsetzungsproblem?
for(i in best){
agg_ums = create_agg_ums(skalen_tmp=skalen2, umsetzung = umsetzung, skala=i)
plot_agg_ums(agg_ums = agg_ums, skala=i)
}
# FÃ¼r die Einrichtungen aufschlÃ¼sseln
agg_df = create_agg_df(skalen_tmp = skalen2, umsetzung = umsetzung, variables = best)
par(mfrow=c(2,2))
plot_einrichtungen(agg_df)
check_skalen(data=data,
skalen_scores=skalen_scores,
variables=best,
pred_var=pred_var,
score_type = "scores_mean",
group_names = imp_names)
data[,skalen2[["Paed.Halt.1"]]]
data[,skalen2[[c("Paed.Halt.1", "Paed.Halt.2"]]]
data[,skalen2[[c("Paed.Halt.1", "Paed.Halt.2"]]
data[,skalen2[[c("Paed.Halt.1", "Paed.Halt.2")]]]
c("Paed.Halt.1", "Paed.Halt.2")
skalen2[[c("Paed.Halt.1", "Paed.Halt.2")]]
data[,c(skalen2[["Paed.Halt.1"]], skalen2[["Paed.Halt.2"]])]
fact_data = data[,c(skalen2[["Paed.Halt.1"]], skalen2[["Paed.Halt.2"]])]
factanal(fact_data)
factanal(fact_data, factors = 2)
table(names(fact_data))
jitter(fact_data)
apply(fact_data, 2, jitter)
apply(fact_data, 2, jitter, amount=0.01)
fact_data = apply(fact_data, 2, jitter, amount=0.01)
factanal(fact_data, factors = 2)
factanal(fact_data, factors = 4)
factanal(fact_data, factors = 7)
factanal(fact_data, factors = 13)
factanal(fact_data, factors = 12)
factanal(fact_data, factors = 8)
factanal(fact_data, factors = 10)
factanal(fact_data, factors = 9)
factanal(fact_data, factors = 3)
factanal(fact_data, factors = 2)
factanal(fact_data, factors = 3)
factanal(fact_data, factors = 2)
