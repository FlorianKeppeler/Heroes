# write.table(unique(data$I903_01), file = "C:/Heroes/Sammlung/I903_01_sonstige_Verb_Entlassung.txt", row.names = F, col.names = F)
# write.table(unique(data$I904_09a), file = "C:/Heroes/Sammlung/I904_09a_sonstige_Vetorecht_Entlassung.txt", row.names = F, col.names = F)
# write.table(unique(data$J103_01), file = "C:/Heroes/Sammlung/J103_01_sonstige_Verbesserung_Haltung.txt", row.names = F, col.names = F)
# write.table(unique(data$K204_01), file = "C:/Heroes/Sammlung/K204_01_sonstige_Interdisz_Team.txt", row.names = F, col.names = F)
# write.table(unique(data$K209_01), file = "C:/Heroes/Sammlung/K209_01_sonstige_Verbesserung_Teamqual_Qualifikation.txt", row.names = F, col.names = F)
# write.table(unique(data$N503_01), file = "C:/Heroes/Sammlung/N503_01_sonstige_Anmerkungen_Abschluss.txt", row.names = F, col.names = F)
#-----------------------------------------------------------------------------------
# Deskriptive Analyse
# Plots
descriptive_anal_plots(data=data, type="binom", path="C:/Heroes/Ergebnisse/Grafiken/Deskriptive Analyse Plots")
# Mittelwerte von Items und Umsetzung
get_item_summary(data,
file.excel = "C:/Heroes/Ergebnisse/Excel/Mittelwerte/Items.xlsx",
path.plot="C:/Heroes/Ergebnisse/Grafiken/Items nach Skala/Skala")
# Faktorladungen pro Skala
# skalen_loadings = check_loadings(skalen_scores)
# skalen ordnen -> wichtigste Haltekräfte nach Umfragewert
# plot_skalen_imp(create_skalen_imp(score_type = "scores_mean",
#                                   skalen_scores = skalen_scores,
#                                   group_index=get_index_by_group(data,
#                                                                  "B102",
#                                                                  group_keys = c(1:5))),
#                 mar=c(8,3,1,1),
#                 ylim = c(0,6),
#                 main = "",
#                 plot=T,
#                 file="C:/Heroes/Ergebnisse/PDF/aktuell/Deskriptive Analyse Plots/Wichtigkeit_gesamt.pdf")
#
# wichtigste Haltekraft nach Abgleich mit tatsächlicher Haltekraft für verschiedene Gruppierungen
group_list = list("Gesamt" = 1:5, "SBBZ" = 2, "Leitung" = 1, "HZE" = 3:5)
ums_data = create_ums_data(data, umsetzung)
# wichtigste Haltekraft nach Abgleich mit tatsächlicher Haltekraft für verschiedene Gruppierungen
# Berechnung der Skalen
data_skalen = skalen
data_skalen_ohne = skalen_ohne
skalen_scores = get_skalen_scores(data = data,
skalen = data_skalen_ohne,
skalen_names =  names(data_skalen_ohne))
plot_combined_imp(skalen = skalen,
data = data,
skalen_scores = skalen_scores,
umsetzung = umsetzung,
var_name_group= "B102",
ums_data = ums_data,
group_list = group_list,
path="C:/Heroes/Ergebnisse/Grafiken/Wichtigkeit und Umsetzung/Wichtigkeit",
combined=FALSE)
plot_combined_imp(skalen = skalen,
data = data,
skalen_scores = skalen_scores,
umsetzung = umsetzung,
var_name_group= "B102",
ums_data = ums_data,
group_list = group_list,
path="C:/Heroes/Ergebnisse/Grafiken/Wichtigkeit und Umsetzung/Wichtigkeit_Umsetzung",
combined=TRUE)
# Vergleiche der Skalen unter den Gruppen:
plot_group_diff(skalen=skalen,
umsetzung=umsetzung,
ums_data=ums_data,
group_list = list("SBBZ" = 2,"HZE" = 3:5),
path = "C:/Heroes/Ergebnisse/Grafiken/Wichtigkeit und Umsetzung/")
plot_group_diff(skalen,
umsetzung,
ums_data,
group_list = list("Leitung" = 1,"Mitarbeitende" = 2:5),
path = "C:/Heroes/Ergebnisse/Grafiken/Wichtigkeit und Umsetzung/")
# wichtigste Haltekraft nach Oberskala -------------------------------------------------
# Berechnung der Skalen
data_skalen = skalen2
data_skalen_ohne = skalen2_ohne
skalen_scores = get_skalen_scores(data = data,
skalen = data_skalen_ohne,
skalen_names =  names(data_skalen_ohne))
plot_combined_imp(skalen = skalen2,
data = data,
skalen_scores = skalen_scores,
umsetzung = umsetzung,
var_name_group= "B102",
ums_data = ums_data,
group_list = group_list,
path="C:/Heroes/Ergebnisse/Grafiken/Wichtigkeit und Umsetzung/Oberskala_Wichtigkeit",
combined=FALSE)
plot_combined_imp(skalen = skalen2,
data = data,
skalen_scores = skalen_scores,
umsetzung = umsetzung,
var_name_group= "B102",
ums_data = ums_data,
group_list = group_list,
path="C:/Heroes/Ergebnisse/Grafiken/Wichtigkeit und Umsetzung/Oberskala_Wichtigkeit_Umsetzung",
combined=TRUE)
# Vergleiche der Skalen unter den Gruppen:
plot_group_diff(skalen=skalen2,
umsetzung=umsetzung,
ums_data=ums_data,
group_list = list("SBBZ" = 2,"HZE" = 3:5),
path = "C:/Heroes/Ergebnisse/Grafiken/Wichtigkeit und Umsetzung/Oberskala_")
plot_group_diff(skalen2,
umsetzung,
ums_data,
group_list = list("Leitung" = 1,"Mitarbeitende" = 2:5),
path = "C:/Heroes/Ergebnisse/Grafiken/Wichtigkeit und Umsetzung/Oberskala_")
source("C:/Heroes/Funktionen.R")
source("C:/Heroes/keys.R")
library(randomForest)
library(openxlsx)
library(betareg)
data = import_data_surv(Path="C:/Heroes/Downloads soscisurvey/CSV/data_HerOEs_2023-08-27_16-42.csv")
nrow(data)
# Leute entfernen die nicht mit jM arbeiten:
data = data[-unique(c(which(data$C207_07 == 2), which(data$B101_04 == 2))), ]
#--------------------------------------
# Stichprobe:
nrow(data)
#  -> 397 Versuchspersonen gesamt
# SBBZ
sum(data$B102==2)
# 74
# HZE stationär
sum(data$B102==3)
#154
#  -> 228 Versuchspersonen aus SBBZ und HZE stationär
# Demographie ---------------------------
sum(!is.na(data$B103))
sum(!is.na(data$B105))
sum(!is.na(data$B110))
#  --> alle geben 228 aus: insgesamt 228 Versuchspersonen zu Demographie befragt
# Geschlecht
table(data$B103)
# -> 151: w;    75: m;   2: d
# Berufserfahrung:
table(data$B105)
#  -> 34: < 3;    99: 4 - 10;     95: > 11
# Alter:
table(data$B110)
#  -> 61: < 30;    126:  31 - 50;    41: > 51
# Arbeitsbereiche:
table(data$B102)
# -> 88: Leitung;    74: SBBZ;    154: HZE.station;     20: HZE.teilst;     61: HZE.ambul
sum(!is.na(data$B107))
#  -> Rücklauf sind 397 nach Ausschluss der Personen die nicht mit jM arbeiten
write_einrichtungen_sbbz_hze(data, file= "C:/Heroes/Ergebnisse/Excel/Einrichtungen/Sbbz_Hze.xlsx")
#-----------------------------------------------------------------------------
# alle offenen Fragen ausgeben:
# write.table(unique(data$C202_01), file = "C:/Heroes/Sammlung/C202_01_sonstige_Begriffe.txt", row.names = F, col.names = F)
# write.table(unique(data$C206_01), file = "C:/Heroes/Sammlung/C206_01_sonstige_Verhaltensweisen.txt", row.names = F, col.names = F)
# write.table(unique(data$D334_01), file = "C:/Heroes/Sammlung/D334_01_sonstige_Info_Anmerkung.txt", row.names = F, col.names = F)
# write.table(unique(data$D305_01), file = "C:/Heroes/Sammlung/D305_01_sonstige_Dokumente.txt", row.names = F, col.names = F)
# write.table(unique(data$D306_11a), file = "C:/Heroes/Sammlung/D306_11a_sonstige_weitereInfos.txt", row.names = F, col.names = F)
# write.table(unique(data$D311_01), file = "C:/Heroes/Sammlung/D311_01_sonstige_VerbesserungAnfrage.txt", row.names = F, col.names = F)
# write.table(unique(data$D334_01), file = "C:/Heroes/Sammlung/D334_01_sonstige_Anmerkung_VerbesserungAnfrage.txt", row.names = F, col.names = F)
# write.table(unique(data$E406_09a), file = "C:/Heroes/Sammlung/E406_09a_sonstige_Vetorecht_Aufnahme.txt", row.names = F, col.names = F)
# write.table(unique(data$E407_09a), file = "C:/Heroes/Sammlung/E407_09a_sonstige_Vetorempfehlung_Aufnahme.txt", row.names = F, col.names = F)
# write.table(unique(data$E403_01), file = "C:/Heroes/Sammlung/E403_01_sonstige_Verb_Aufn_Bez.txt", row.names = F, col.names = F)
# write.table(unique(data$F505_01), file = "C:/Heroes/Sammlung/F505_01_sonstige_Verb_Setting.txt", row.names = F, col.names = F)
# write.table(unique(data$G603_01), file = "C:/Heroes/Sammlung/G603_01_sonstige_Verb_Alltag.txt", row.names = F, col.names = F)
# write.table(unique(data$H704_01), file = "C:/Heroes/Sammlung/H704_01_sonstige_Verb_Krisenbew.txt", row.names = F, col.names = F)
# write.table(unique(data$H803_01), file = "C:/Heroes/Sammlung/H803_011_sonstige_Verb_Krisenauf.txt", row.names = F, col.names = F)
# write.table(unique(data$I903_01), file = "C:/Heroes/Sammlung/I903_01_sonstige_Verb_Entlassung.txt", row.names = F, col.names = F)
# write.table(unique(data$I904_09a), file = "C:/Heroes/Sammlung/I904_09a_sonstige_Vetorecht_Entlassung.txt", row.names = F, col.names = F)
# write.table(unique(data$J103_01), file = "C:/Heroes/Sammlung/J103_01_sonstige_Verbesserung_Haltung.txt", row.names = F, col.names = F)
# write.table(unique(data$K204_01), file = "C:/Heroes/Sammlung/K204_01_sonstige_Interdisz_Team.txt", row.names = F, col.names = F)
# write.table(unique(data$K209_01), file = "C:/Heroes/Sammlung/K209_01_sonstige_Verbesserung_Teamqual_Qualifikation.txt", row.names = F, col.names = F)
# write.table(unique(data$N503_01), file = "C:/Heroes/Sammlung/N503_01_sonstige_Anmerkungen_Abschluss.txt", row.names = F, col.names = F)
#-----------------------------------------------------------------------------------
# Deskriptive Analyse
# Plots
descriptive_anal_plots(data=data, type="binom", path="C:/Heroes/Ergebnisse/Grafiken/Deskriptive Analyse Plots")
# Mittelwerte von Items und Umsetzung
res_tmp = data.frame("Gruppe"=character(0),
"Skale"=character(0),
"Item"=character(0),
"mean"=numeric(0),
"se.1"=numeric(0),
"se.2"=numeric(0),
"umsetzung"=numeric(0),
"Frage"=character(0))
res_tmp_names = names(res_tmp)
skalen_df = data.frame("Skale"=character(0), "Item"=character(0))
names_skalen_df = names(skalen_df)
skalen_names = names(skalen)
for(i in 1:length(skalen)){
for(j in 1:length(skalen[[i]])){
tmp = c(skalen_names[i], skalen[[i]][j])
skalen_df = rbind(skalen_df, tmp)
}
}
names(skalen_df) = names_skalen_df
skalen_df
names(keys)
i=17
length(keys[[i]])
names(keys)
keys[[i]]
j=7
i="Krisenauf"
keys[[i]]
skalen_df$Item
skalen_df$Item == keys[[i]][j]
keys[[i]][j]
skalen_df
skalen_df$Item == keys[[i]][j]
which(skalen_df$Item == keys[[i]][j])
View(skalen_df)
tmp_skale = skalen_df$Skale[skalen_df$Item == keys[[i]][j]]
tmp_skale
data[,keys[[i]][j]]
tmp_fit = binom_est(data[,keys[[i]][j]], yx = 1:n_items$n[n_items$Item == keys[[i]][j]])
tmp_fit
tmp = c(i,
ifelse(length(tmp_skale) == 0, NA, tmp_skale),
keys[[i]][j],
round(tmp_fit[1], 2),
round(tmp_fit[2], 3),
round(tmp_fit[3], 3))
tmp
i
tmp_skale
tmp_skale
res_tmp = data.frame("Gruppe"=character(0),
"Skale"=character(0),
"Item"=character(0),
"mean"=numeric(0),
"se.1"=numeric(0),
"se.2"=numeric(0),
"umsetzung"=numeric(0),
"Frage"=character(0))
res_tmp_names = names(res_tmp)
skalen_df = data.frame("Skale"=character(0), "Item"=character(0))
names_skalen_df = names(skalen_df)
skalen_names = names(skalen)
for(i in 1:length(skalen)){
for(j in 1:length(skalen[[i]])){
tmp = c(skalen_names[i], skalen[[i]][j])
skalen_df = rbind(skalen_df, tmp)
}
}
names(skalen_df) = names_skalen_df
for(i in names(keys)){
for(j in 1:length(keys[[i]])){
tmp_skale = skalen_df$Skale[skalen_df$Item == keys[[i]][j]]
tmp_fit = binom_est(data[,keys[[i]][j]], yx = 1:n_items$n[n_items$Item == keys[[i]][j]])
# tmp = c(i,
#         ifelse(length(tmp_skale) == 0, NA, tmp_skale),
#         keys[[i]][j],
#         round(mean(data[,keys[[i]][j]], na.rm=T), 2),
#         median(data[,keys[[i]][j]], na.rm=T),
#         round(sd(data[,keys[[i]][j]], na.rm=T), 3))
if(length(tmp_skale > 0)){
for(n in 1:length(tmp_skale)){
tmp = c(i,
tmp_skale[n],
keys[[i]][j],
round(tmp_fit[1], 2),
round(tmp_fit[2], 3),
round(tmp_fit[3], 3))
ums_tmp = data[ ,umsetzung$var.Key[umsetzung$var.Umgesetzt == keys[[i]][j]]]
tmp = c(tmp, round(mean(ums_tmp - 1, na.rm=T)*100, 0))
tmp = c(tmp, codebook$`Variable Label`[codebook$Variable == keys[[i]][j]][1])
res_tmp = rbind(res_tmp, tmp,deparse.level = 2)
}
}else{
tmp = c(i,
NA,
keys[[i]][j],
round(tmp_fit[1], 2),
round(tmp_fit[2], 3),
round(tmp_fit[3], 3))
ums_tmp = data[ ,umsetzung$var.Key[umsetzung$var.Umgesetzt == keys[[i]][j]]]
tmp = c(tmp, round(mean(ums_tmp - 1, na.rm=T)*100, 0))
tmp = c(tmp, codebook$`Variable Label`[codebook$Variable == keys[[i]][j]][1])
res_tmp = rbind(res_tmp, tmp,deparse.level = 2)
}
}
}
names(res_tmp) = res_tmp_names
res_tmp = res_tmp[order(res_tmp$Skale),]
res_tmp
View(res_tmp)
get_item_summary(data,
file.excel = "C:/Heroes/Ergebnisse/Excel/Mittelwerte/Items.xlsx",
path.plot="C:/Heroes/Ergebnisse/Grafiken/Items nach Skala/Skala")
get_item_summary(data,
file.excel = "C:/Heroes/Ergebnisse/Excel/Mittelwerte/Items.xlsx",
path.plot="C:/Heroes/Ergebnisse/Grafiken/Items nach Skala/Skala")
get_item_summary(data,
file.excel = "C:/Heroes/Ergebnisse/Excel/Mittelwerte/Items.xlsx",
path.plot="C:/Heroes/Ergebnisse/Grafiken/Items nach Skala/")
get_item_summary(data,
file.excel = "C:/Heroes/Ergebnisse/Excel/Mittelwerte/Items.xlsx",
path.plot="C:/Heroes/Ergebnisse/Grafiken/Items nach Skala/Skala")
warnings()
res_tmp = data.frame("Gruppe"=character(0),
"Skale"=character(0),
"Item"=character(0),
"mean"=numeric(0),
"se.1"=numeric(0),
"se.2"=numeric(0),
"umsetzung"=numeric(0),
"Frage"=character(0))
res_tmp_names = names(res_tmp)
skalen_df = data.frame("Skale"=character(0), "Item"=character(0))
names_skalen_df = names(skalen_df)
skalen_names = names(skalen)
for(i in 1:length(skalen)){
for(j in 1:length(skalen[[i]])){
tmp = c(skalen_names[i], skalen[[i]][j])
skalen_df = rbind(skalen_df, tmp)
}
}
names(skalen_df) = names_skalen_df
for(i in names(keys)){
for(j in 1:length(keys[[i]])){
tmp_skale = skalen_df$Skale[skalen_df$Item == keys[[i]][j]]
tmp_fit = binom_est(data[,keys[[i]][j]], yx = 1:n_items$n[n_items$Item == keys[[i]][j]])
# tmp = c(i,
#         ifelse(length(tmp_skale) == 0, NA, tmp_skale),
#         keys[[i]][j],
#         round(mean(data[,keys[[i]][j]], na.rm=T), 2),
#         median(data[,keys[[i]][j]], na.rm=T),
#         round(sd(data[,keys[[i]][j]], na.rm=T), 3))
if(length(tmp_skale > 0)){
for(n in 1:length(tmp_skale)){
tmp = c(i,
tmp_skale[n],
keys[[i]][j],
round(tmp_fit[1], 2),
round(tmp_fit[2], 3),
round(tmp_fit[3], 3))
ums_tmp = data[ ,umsetzung$var.Key[umsetzung$var.Umgesetzt == keys[[i]][j]]]
tmp = c(tmp, round(mean(ums_tmp - 1, na.rm=T)*100, 0))
tmp = c(tmp, codebook$`Variable Label`[codebook$Variable == keys[[i]][j]][1])
res_tmp = rbind(res_tmp, tmp,deparse.level = 2)
}
}else{
tmp = c(i,
NA,
keys[[i]][j],
round(tmp_fit[1], 2),
round(tmp_fit[2], 3),
round(tmp_fit[3], 3))
ums_tmp = data[ ,umsetzung$var.Key[umsetzung$var.Umgesetzt == keys[[i]][j]]]
tmp = c(tmp, round(mean(ums_tmp - 1, na.rm=T)*100, 0))
tmp = c(tmp, codebook$`Variable Label`[codebook$Variable == keys[[i]][j]][1])
res_tmp = rbind(res_tmp, tmp,deparse.level = 2)
}
}
}
names(res_tmp) = res_tmp_names
res_tmp = res_tmp[order(res_tmp$Skale),]
i=
1
fit = as.numeric(res_tmp[res_tmp$Skale == names(skalen)[i],"mean"])
se1 = as.numeric(res_tmp[res_tmp$Skale == names(skalen)[i],"se.1"])
se2 = as.numeric(res_tmp[res_tmp$Skale == names(skalen)[i],"se.2"])
fit = fit[!is.na(fit)]
se1 = se1[!is.na(se1)]
se2 = se2[!is.na(se2)]
length(fit)
fit
i=30
names(skalen)[i]
res_tmp$Skale
res_tmp$Skale == names(skalen)[i]
fit = as.numeric(res_tmp[res_tmp$Skale == names(skalen)[i],"mean"])
se1 = as.numeric(res_tmp[res_tmp$Skale == names(skalen)[i],"se.1"])
se2 = as.numeric(res_tmp[res_tmp$Skale == names(skalen)[i],"se.2"])
fit
fit = fit[!is.na(fit)]
se1 = se1[!is.na(se1)]
se2 = se2[!is.na(se2)]
fit
length(fit) > 0
path.plot
path.plot="C:/Heroes/Ergebnisse/Grafiken/Items nach Skala/Skala"
par(mar=c(10, 5, 3, 3))
plot(fit, 1:length(fit),
xlim=c(1,6),
xaxt="n",
xlab="",
yaxt="n",
ylab="",
type="n",
main=names(skalen)[i],
ylim=c(0.5, length(fit)+0.5))
abline(v=c(1:6), col="grey80")
arrows(x0 = rep(0, length(fit)), x1 = fit, y0 = 1:length(fit), lty=2, length = 0, lwd=1, col="grey50")
arrows(x0 = fit, x1 = se1, y0 = 1:length(fit), length = 0.1, lwd=2, col="grey40", angle = 90)
arrows(x0 = fit, x1 = se2, y0 = 1:length(fit), length = 0.1, lwd=2, col="grey40", angle = 90)
points(fit, 1:length(fit), pch=20, cex=1.3)
labels = res_tmp$Item[res_tmp$Skale == names(skalen)[i]]
labels = labels[!is.na(labels)]
labels
axis(side=2, at = 1:length(fit), labels = labels, las=2)
axis(side=1,
at = 1:6,
labels = c("stimme gar nicht zu", "stimme nicht zu", "stimme eher nicht zu",
"stimme eher zu", "stimme zu", "stimme vollkommen zu"),
las=2)
path.plot="C:/Heroes/Ergebnisse/Grafiken/Items nach Skala/"
unlink(path.plot)
unlink(path.plot, recursive = T)
path.plot
path.plot="C:/Heroes/Ergebnisse/Grafiken/Items nach Skala"
unlink(path.plot, recursive = T)
dir.create(path.plot)
for(i in 1:length(skalen)){
fit = as.numeric(res_tmp[res_tmp$Skale == names(skalen)[i],"mean"])
se1 = as.numeric(res_tmp[res_tmp$Skale == names(skalen)[i],"se.1"])
se2 = as.numeric(res_tmp[res_tmp$Skale == names(skalen)[i],"se.2"])
fit = fit[!is.na(fit)]
se1 = se1[!is.na(se1)]
se2 = se2[!is.na(se2)]
if(length(fit) > 0){
jpeg(filename = paste0(path.plot, "Skala_", i, ".jpg"), width=1000, height=570, pointsize = 20)
par(mar=c(10, 5, 3, 3))
plot(fit, 1:length(fit),
xlim=c(1,6),
xaxt="n",
xlab="",
yaxt="n",
ylab="",
type="n",
main=names(skalen)[i],
ylim=c(0.5, length(fit)+0.5))
abline(v=c(1:6), col="grey80")
arrows(x0 = rep(0, length(fit)), x1 = fit, y0 = 1:length(fit), lty=2, length = 0, lwd=1, col="grey50")
arrows(x0 = fit, x1 = se1, y0 = 1:length(fit), length = 0.1, lwd=2, col="grey40", angle = 90)
arrows(x0 = fit, x1 = se2, y0 = 1:length(fit), length = 0.1, lwd=2, col="grey40", angle = 90)
points(fit, 1:length(fit), pch=20, cex=1.3)
labels = res_tmp$Item[res_tmp$Skale == names(skalen)[i]]
labels = labels[!is.na(labels)]
axis(side=2, at = 1:length(fit), labels = labels, las=2)
axis(side=1,
at = 1:6,
labels = c("stimme gar nicht zu", "stimme nicht zu", "stimme eher nicht zu",
"stimme eher zu", "stimme zu", "stimme vollkommen zu"),
las=2)
dev.off()
}
}
source("C:/Heroes/Funktionen.R")
source("C:/Heroes/keys.R")
library(randomForest)
library(openxlsx)
library(betareg)
data = import_data_surv(Path="C:/Heroes/Downloads soscisurvey/CSV/data_HerOEs_2023-08-27_16-42.csv")
nrow(data)
# Leute entfernen die nicht mit jM arbeiten:
data = data[-unique(c(which(data$C207_07 == 2), which(data$B101_04 == 2))), ]
#--------------------------------------
# Stichprobe:
nrow(data)
#  -> 397 Versuchspersonen gesamt
# SBBZ
sum(data$B102==2)
# 74
# HZE stationär
sum(data$B102==3)
#154
#  -> 228 Versuchspersonen aus SBBZ und HZE stationär
# Demographie ---------------------------
sum(!is.na(data$B103))
sum(!is.na(data$B105))
sum(!is.na(data$B110))
#  --> alle geben 228 aus: insgesamt 228 Versuchspersonen zu Demographie befragt
# Geschlecht
table(data$B103)
# -> 151: w;    75: m;   2: d
# Berufserfahrung:
table(data$B105)
#  -> 34: < 3;    99: 4 - 10;     95: > 11
# Alter:
table(data$B110)
#  -> 61: < 30;    126:  31 - 50;    41: > 51
# Arbeitsbereiche:
table(data$B102)
# -> 88: Leitung;    74: SBBZ;    154: HZE.station;     20: HZE.teilst;     61: HZE.ambul
sum(!is.na(data$B107))
#  -> Rücklauf sind 397 nach Ausschluss der Personen die nicht mit jM arbeiten
write_einrichtungen_sbbz_hze(data, file= "C:/Heroes/Ergebnisse/Excel/Einrichtungen/Sbbz_Hze.xlsx")
#-----------------------------------------------------------------------------
# alle offenen Fragen ausgeben:
# write.table(unique(data$C202_01), file = "C:/Heroes/Sammlung/C202_01_sonstige_Begriffe.txt", row.names = F, col.names = F)
# write.table(unique(data$C206_01), file = "C:/Heroes/Sammlung/C206_01_sonstige_Verhaltensweisen.txt", row.names = F, col.names = F)
# write.table(unique(data$D334_01), file = "C:/Heroes/Sammlung/D334_01_sonstige_Info_Anmerkung.txt", row.names = F, col.names = F)
# write.table(unique(data$D305_01), file = "C:/Heroes/Sammlung/D305_01_sonstige_Dokumente.txt", row.names = F, col.names = F)
# write.table(unique(data$D306_11a), file = "C:/Heroes/Sammlung/D306_11a_sonstige_weitereInfos.txt", row.names = F, col.names = F)
# write.table(unique(data$D311_01), file = "C:/Heroes/Sammlung/D311_01_sonstige_VerbesserungAnfrage.txt", row.names = F, col.names = F)
# write.table(unique(data$D334_01), file = "C:/Heroes/Sammlung/D334_01_sonstige_Anmerkung_VerbesserungAnfrage.txt", row.names = F, col.names = F)
# write.table(unique(data$E406_09a), file = "C:/Heroes/Sammlung/E406_09a_sonstige_Vetorecht_Aufnahme.txt", row.names = F, col.names = F)
# write.table(unique(data$E407_09a), file = "C:/Heroes/Sammlung/E407_09a_sonstige_Vetorempfehlung_Aufnahme.txt", row.names = F, col.names = F)
# write.table(unique(data$E403_01), file = "C:/Heroes/Sammlung/E403_01_sonstige_Verb_Aufn_Bez.txt", row.names = F, col.names = F)
# write.table(unique(data$F505_01), file = "C:/Heroes/Sammlung/F505_01_sonstige_Verb_Setting.txt", row.names = F, col.names = F)
# write.table(unique(data$G603_01), file = "C:/Heroes/Sammlung/G603_01_sonstige_Verb_Alltag.txt", row.names = F, col.names = F)
# write.table(unique(data$H704_01), file = "C:/Heroes/Sammlung/H704_01_sonstige_Verb_Krisenbew.txt", row.names = F, col.names = F)
# write.table(unique(data$H803_01), file = "C:/Heroes/Sammlung/H803_011_sonstige_Verb_Krisenauf.txt", row.names = F, col.names = F)
# write.table(unique(data$I903_01), file = "C:/Heroes/Sammlung/I903_01_sonstige_Verb_Entlassung.txt", row.names = F, col.names = F)
# write.table(unique(data$I904_09a), file = "C:/Heroes/Sammlung/I904_09a_sonstige_Vetorecht_Entlassung.txt", row.names = F, col.names = F)
# write.table(unique(data$J103_01), file = "C:/Heroes/Sammlung/J103_01_sonstige_Verbesserung_Haltung.txt", row.names = F, col.names = F)
# write.table(unique(data$K204_01), file = "C:/Heroes/Sammlung/K204_01_sonstige_Interdisz_Team.txt", row.names = F, col.names = F)
# write.table(unique(data$K209_01), file = "C:/Heroes/Sammlung/K209_01_sonstige_Verbesserung_Teamqual_Qualifikation.txt", row.names = F, col.names = F)
# write.table(unique(data$N503_01), file = "C:/Heroes/Sammlung/N503_01_sonstige_Anmerkungen_Abschluss.txt", row.names = F, col.names = F)
#-----------------------------------------------------------------------------------
# Deskriptive Analyse
# Plots
descriptive_anal_plots(data=data, type="binom", path="C:/Heroes/Ergebnisse/Grafiken/Deskriptive Analyse Plots")
# Mittelwerte von Items und Umsetzung
get_item_summary(data,
file.excel = "C:/Heroes/Ergebnisse/Excel/Mittelwerte/Items.xlsx",
path.plot="C:/Heroes/Ergebnisse/Grafiken/Items nach Skala")
