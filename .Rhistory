res = cbind(t, tmp)
m = length(group_index)
for(i in 1:m){
ls[[i]] = res$t[which(res$B102 %in% group_index[i])]
}
mat = matrix(0, m, m)
for(i in 1:m){
for(j in 1:m){
if(i!=j){
mat[i,j] = round(t.test(ls[[i]], ls[[j]])$p.value,3)
}else{
mat[i,j] = round(mean(ls[[i]]),3)
}
}
}
mat
test = cbind(t, tmp)
data = data
variables = names(keys)
group_index = list(1,2,c(3,4,5),3,c(4,5))
group_names = imp_names[["B102_edit"]][1:5]
group = list()
for(i in 1:length(group_index)){
data_sub = data[which(data$B102 %in% group_index[[i]]), keys[[var_str]]]
data_sub = data_sub[complete.cases(data_sub),]
group[[group_names[i]]] = data_sub
}
var_str = "Dokumente"
for(i in 1:length(group_index)){
data_sub = data[which(data$B102 %in% group_index[[i]]), keys[[var_str]]]
data_sub = data_sub[complete.cases(data_sub),]
group[[group_names[i]]] = data_sub
}
group
scores = skalen_scores[["Beziehung.2"]][["scores_fact"]]
scores = skalen_scores[[score_name]][[score_type]]
# skalen_subsets
score_type = "scores_fact"
score_name = "Beziehung.2"
tmp = data[,pred_var]
tmp[!complete.cases(tmp),] = NA
scores = skalen_scores[[score_name]][[score_type]]
scores
tmp_scores = cbind(scores, tmp)
tmp_scores
group_index = c(2,3)
group_type = "B102"
m = length(group_index)
tmp = list()
group = list()
tmp_scores[,group_type]
tmp_scores[which(tmp_scores[,group_type] == group_index[i]),]
tmp_scores[which(tmp_scores[,group_type == group_index[i])]
}
imp_names
tmp = data[,pred_var]
tmp[!complete.cases(tmp),] = NA
scores = skalen_scores$Beziehung.2$scores_fact
tmp_scores = cbind(scores, tmp)
dist_plot(test, n=1, m = 2)
group_index = c(2,3)
ls = list()
m = length(group_index)
for(i in 1:m){
ls[[i]] = res$t[which(res$B102 %in% group_index[i])]
}
mat = matrix(0, m, m)
for(i in 1:m){
for(j in 1:m){
if(i!=j){
mat[i,j] = round(t.test(ls[[i]], ls[[j]])$p.value,3)
}else{
mat[i,j] = round(mean(ls[[i]]),3)
}
}
}
# NA_vec = rep(NA, nrow(tmp))
#
# NA_vec[tmp$B102 == 2] = 2
# NA_vec[tmp$B102 %in% c(3,4,5)] = 3
# tmp$B102_edited = NA_vec
get_pred_variables
# check_skalen_by_groups
sum(is.na(data[,pred_var[2]]))
skalen_scores[[2]]$scores_mean
names(skalen_scores)
plot(scores_fact ~ scores_mean)
a = 0
k = 1
while(a <= 0.05){
fact = factanal(tmp_jittered, k, scores = "regression")
a = fact$PVAL
k = k + 1
}
fact$loadings
hist(fact$scores[,1])
hist(jitter(tmp[,1]))
hist(tmp[,1])
names(skalen)
tmp = data[,skalen[["Paed.Halt.1"]]]
tmp_var = data[,pred_var]
tmp
names(umsetzung)
umsetzung[["Paed.Halt.1"]]
plot(density(group[[1]][,n], bw = 0.5), xlim=c(1,m))
lines(density(group[[2]][,n], bw = 0.5))
lines(density(group[[3]][,n], bw = 0.5))
lines(density(group[[4]][,n], bw = 0.5))
lines(density(group[[5]][,n], bw = 0.5))
mean(group[[5]][,1])
# Arbeitsbereiche -> B102
data_sub <- data[which(data$B102 == 3),]
names(keys)
data_item = data_sub[,l[["Begriffe"]]]
data_item = data_item[complete.cases(data_item),]
groups = list()
groups[[1]] = data_item
names(data)
tmp_scores[which(tmp_scores[,group_type == group_index[i]]),]
tmp_scores[,group_type == group_index[i]]
group_index[i]
group_type
tmp_scores[,group_type] == group_index[i]
tmp_scores[tmp_scores[,group_type] == group_index[i],]
tmp_scores[tmp_scores[,group_type] == group_index[i], 1]
for(i in 1:m){
group[[i]] = tmp_scores[tmp_scores[,group_type] == group_index[i], 1]
}
group
imp_names[[group_type]]
imp_names[[group_type]][group_index]
group_names = imp_names[[group_type]][group_index]
# skalen_subsets
score_type = "scores_fact"
score_name = "Beziehung.2"
group_index = c(2,3)
group_type = "B102"
group_names = imp_names[[group_type]][group_index]
tmp = data[,pred_var]
tmp[!complete.cases(tmp),] = NA
scores = skalen_scores[[score_name]][[score_type]]
tmp_scores = cbind(scores, tmp)
m = length(group_index)
group = list()
for(i in 1:m){
group[[i]] = tmp_scores[tmp_scores[,group_type] == group_index[i], 1]
}
source("C:/Heroes/Funktionen.R")
dist_plot(group = group, n=1, m=length(group_index), n_group = 1, data_type="continous")
group
group = list()
for(i in 1:m){
group[[i]] = data.frame("score"=tmp_scores[tmp_scores[,group_type] == group_index[i], 1])
}
group
dist_plot(group = group, n=1, m=length(group_index), n_group = 1, data_type="continous")
group
group = group
n=1
m=length(group_index)
n_group = 1
data_type="continous"
dist_plot(group = group, n=1, m=length(group_index), n_group = 2, data_type="continous")
dist_plot(group = group, n=1, m=length(group_index), n_group = 1, data_type="continous")
res = matrix(0, n_group, n_group)
res
dist_plot(group = group, n=1, m=length(group_index), n_group = 2, data_type="continous")
dist_plot(group = group, n=1, m=length(group_index), n_group = length(group_index), data_type="continous")
n_group = length(group_index)
res = matrix(0, n_group, n_group)
res
for(i in 1:n_group){
for(j in 1:n_group){
if(i!=j){
if( i < j){ # unteres dreieck
res[i,j] = round(item_abs(group1 = group[[i]], group2 = group[[j]], n, m, data_type), 3)
}
if(i > j){ # oberes dreieck
if(length(unique(group[[i]][,n]))>1 | length(unique(group[[j]][,n]))>1){
res[i,j] = round(t.test(group[[i]][,n], group[[j]][,n])$p.value,3)
}else{
if(length(unique(group[[i]][,n]))<=1 & length(unique(group[[j]][,n]))<=1){
if(unique(group[[i]][,n]) != unique(group[[j]][,n])){
res[i,j] = 0 # komplett unterschiedlich wenn nur eine Kategorie gewÃ¤hlt, aber unterschiedliche
}else{
res[i,j] = 1 # komplett gleich
}
}
}
}
}else{ # diagonale
res[i,j] = round(mean(group[[i]][,n]),3)
# res[i,j] = median(group[[i]][,n])
}
}
}
i
j
i
i!=j
i < j
item_abs(group1 = group[[i]], group2 = group[[j]], n, m, data_type)
group[[i]]
group[[j]]
cor_plot(group = group, n=1, m=length(group_index), n_group = length(group_index), data_type="continous")
source("C:/Heroes/Funktionen.R")
cor_plot(group = group, n=1, m=length(group_index), n_group = length(group_index), data_type="continous")
res = matrix(0, n_group, n_group)
cor_plot(group = group, n=1, m=length(group_index), n_group = length(group_index))
res = matrix(0, n_group, n_group)
res
cor(group[[i]], group[[j]]
)
t_plot(group = group, n=1, m=length(group_index), n_group = length(group_index))
t_plot(group = group, n=1, m=length(group_index))
t_plot(group = group, n=2, m=length(group_index))
t_plot(group = group, n=1, m=length(group_index))
source("C:/Heroes/Funktionen.R")
t_plot(group = group, n=1, m=length(group_index))
res = matrix(0, m, m)
res
for(i in 1:m){
for(j in 1:m){
if(i!=j){
res[i,j] = round(t.test(group[[i]][,n], group[[j]][,n])$p.value,3)
}else{
res[i,j] = round(mean(group[[i]][,n]),3)
}
}
}
res
t.test(group[[i]][,n], group[[j]][,n])$p.value
i!=j
mean(group[[i]][,n])
group[[i]]
for(i in 1:m){
for(j in 1:m){
if(i!=j){
res[i,j] = round(t.test(group[[i]][,n], group[[j]][,n])$p.value,3)
}else{
res[i,j] = round(mean(group[[i]][,n], na.rm=T),3)
}
}
}
res
diag(res2) = NA
res2[lower.tri(res2)] = NA
res2 = res
diag(res2) = NA
res2[lower.tri(res2)] = NA
tmp = res2[upper.tri(res2)]
tmp = ifelse(tmp <= 0.01, 4, ifelse(tmp <= 0.05, 3, ifelse(tmp <= 0.1, 2, 1)))
res2[upper.tri(res2)] = tmp
image(res2, breaks = c(0, 1, 2, 3, 4),
zlim=c(0,1),
col=rev(c("grey10","grey50","grey80","white")),
useRaster = FALSE,
xaxt="n", yaxt="n",
main=names(group[[1]])[n])
axis(1, at = seq(0,1, length.out=m), labels=names(group), las=3)
axis(2, at = seq(0,1, length.out=m), labels=names(group), las=2)
for(i in 1:m){
for(j in 1:m){
# if(i == j) text((i-1)/4,(j-1)/4, diag(res)[i])
# if(i < j) text((i-1)/4,(j-1)/4, res[i,j])
text(seq(0,1, length.out=m)[i], seq(0,1, length.out=m)[j], res[i,j])
}
abline(v=(i-1)/(m-1)-(1/((m-1)*2)))
abline(h=(i-1)/(m-1)+(1/((m-1)*2)))
}
res2 = res
diag(res2) = NA
# res2[lower.tri(res2)] = NA
tmp = res2[upper.tri(res2)]
tmp
tmp = ifelse(tmp <= 0.01, 4, ifelse(tmp <= 0.05, 3, ifelse(tmp <= 0.1, 2, 1)))
tmp
res2 = res
diag(res2) = NA
res2 = ifelse(res2 <= 0.01, 4, ifelse(res2 <= 0.05, 3, ifelse(res2 <= 0.1, 2, 1)))
image(res2, breaks = c(0, 1, 2, 3, 4),
zlim=c(0,1),
col=rev(c("grey10","grey50","grey80","white")),
useRaster = FALSE,
xaxt="n", yaxt="n",
main=names(group[[1]])[n])
axis(1, at = seq(0,1, length.out=m), labels=names(group), las=3)
axis(2, at = seq(0,1, length.out=m), labels=names(group), las=2)
for(i in 1:m){
for(j in 1:m){
# if(i == j) text((i-1)/4,(j-1)/4, diag(res)[i])
# if(i < j) text((i-1)/4,(j-1)/4, res[i,j])
text(seq(0,1, length.out=m)[i], seq(0,1, length.out=m)[j], res[i,j])
}
abline(v=(i-1)/(m-1)-(1/((m-1)*2)))
abline(h=(i-1)/(m-1)+(1/((m-1)*2)))
}
group[[i]] = data.frame(score_name=tmp_scores[tmp_scores[,group_type] == group_index[i], 1])
group
group = list()
for(i in 1:m){
group[[i]] = data.frame(score_name=tmp_scores[tmp_scores[,group_type] == group_index[i], 1])
}
t_plot(group = group, n=1, m=length(group_index))
score_name
group[[i]] = data.frame(eval(score_name)=tmp_scores[tmp_scores[,group_type] == group_index[i], 1])
eval(score_name)
group_names[i]
source("C:/Heroes/Funktionen.R")
group = list()
for(i in 1:m){
group[[group_names[i]]] = data.frame(tmp_scores[tmp_scores[,group_type] == group_index[i], 1])
}
t_plot(group = group, n=1, m=length(group_index))
t_plot(group = group, n=1, m=length(group_index), main=paste(score_name, "-", group_type))
t_plot(group = group, n=1, m=length(group_index), main=paste(score_name, "-", group_type, "-", score_type))
check_skalen_by_group(data=data, skalen_scores=skalen_scores, pred_var=pred_var,
score_type = "scores_fact", score_name = "Beziehung.2",
group_type = "B102", group_index = c(2,3), group_names = imp_names)
source("C:/Heroes/Funktionen.R")
check_skalen_by_group(data=data, skalen_scores=skalen_scores, pred_var=pred_var,
score_type = "scores_fact", score_name = "Beziehung.2",
group_type = "B102", group_index = c(2,3), group_names = imp_names)
source("C:/Heroes/Funktionen.R")
check_skalen_by_group(data=data, skalen_scores=skalen_scores, pred_var=pred_var,
score_type = "scores_fact", score_name = "Beziehung.2",
group_type = "B102", group_index = c(2,3), group_names = imp_names)
check_skalen_by_group(data=data, skalen_scores=skalen_scores, pred_var=pred_var,
score_type = "scores_fact", score_name = "Beziehung.1",
group_type = "B102", group_index = c(2,3), group_names = imp_names)
check_skalen_by_group(data=data, skalen_scores=skalen_scores, pred_var=pred_var,
score_type = "scores_mean", score_name = "Beziehung.1",
group_type = "B102", group_index = c(2,3), group_names = imp_names)
pred_var
check_skalen_by_group(data=data, skalen_scores=skalen_scores, pred_var=pred_var,
score_type = "scores_mean", score_name = "Beziehung.1",
group_type = "B103", group_index = c(1,2,3), group_names = imp_names)
check_skalen_by_group(data=data, skalen_scores=skalen_scores, pred_var=pred_var,
score_type = "scores_mean", score_name = "Beziehung.2",
group_type = "B103", group_index = c(1,2,3), group_names = imp_names)
check_skalen_by_group(data=data, skalen_scores=skalen_scores, pred_var=pred_var,
score_type = score_type, score_name = score_name,
group_type = "B105", group_index = c(1,2,3), group_names = imp_names)
check_skalen_by_group(data=data, skalen_scores=skalen_scores, pred_var=pred_var,
score_type = score_type, score_name = score_name,
group_type = "B110", group_index = c(1,2,3), group_names = imp_names)
par(mfrow=c(2,2))
check_skalen_by_group(data=data, skalen_scores=skalen_scores, pred_var=pred_var,
score_type = score_type, score_name = score_name,
group_type = "B102", group_index = c(2,3), group_names = imp_names)
check_skalen_by_group(data=data, skalen_scores=skalen_scores, pred_var=pred_var,
score_type = score_type, score_name = score_name,
group_type = "B103", group_index = c(1,2,3), group_names = imp_names)
check_skalen_by_group(data=data, skalen_scores=skalen_scores, pred_var=pred_var,
score_type = score_type, score_name = score_name,
group_type = "B105", group_index = c(1,2,3), group_names = imp_names)
check_skalen_by_group(data=data, skalen_scores=skalen_scores, pred_var=pred_var,
score_type = score_type, score_name = score_name,
group_type = "B110", group_index = c(1,2,3), group_names = imp_names)
check_skalen(data=data, skalen_scores=skalen_scores, pred_var=pred_var,
score_type = score_type, score_name = score_name, group_names = imp_names)
source("C:/Heroes/Funktionen.R")
check_skalen(data=data, skalen_scores=skalen_scores, pred_var=pred_var,
score_type = score_type, score_name = score_name, group_names = imp_names)
check_skalen(data=data, skalen_scores=skalen_scores, pred_var=pred_var,
score_type = score_type, score_name = score_name, group_names = imp_names)
source("C:/Heroes/Funktionen.R")
check_skalen(data=data, skalen_scores=skalen_scores, pred_var=pred_var,
score_type = score_type, score_name = score_name, group_names = imp_names)
skalen_names
check_skalen(data=data, skalen_scores=skalen_scores, variables=skalen_names[1:12],
pred_var=pred_var, score_type = score_type,
score_name = score_name, group_names = imp_names)
source("C:/Heroes/Funktionen.R")
check_skalen(data=data, skalen_scores=skalen_scores, variables=skalen_names[1:12],
pred_var=pred_var, score_type = score_type,
score_name = score_name, group_names = imp_names)
# skalen_subsets
score_type = "scores_mean"
check_skalen(data=data, skalen_scores=skalen_scores, variables=skalen_names[1:12],
pred_var=pred_var, score_type = score_type,
score_name = score_name, group_names = imp_names)
source("C:/Heroes/Funktionen.R")
check_skalen(data=data,
skalen_scores=skalen_scores,
variables=skalen_names,
pred_var=pred_var,
score_type = "scores_fact",
group_names = imp_names)
source("C:/Heroes/Funktionen.R")
check_skalen(data=data,
skalen_scores=skalen_scores,
variables=skalen_names,
pred_var=pred_var,
score_type = "scores_fact",
group_names = imp_names)
check_skalen(data=data,
skalen_scores=skalen_scores,
variables=skalen_names,
pred_var=pred_var,
score_type = "scores_fact",
group_names = imp_names)
data=data
skalen_scores=skalen_scores
variables=skalen_names
pred_var=pred_var
score_type = "scores_fact"
group_names = imp_names
is.na(skalen_scores[[score_name]][[p]])
skalen_scores[[score_name]]
skalen_scores[[score_name]][[p]]
is.na(skalen_scores[[score_name]][["p"]])
source("C:/Heroes/Funktionen.R")
check_skalen(data=data,
skalen_scores=skalen_scores,
variables=skalen_names,
pred_var=pred_var,
score_type = "scores_fact",
group_names = imp_names)
is.na(skalen_scores[[score_name]][["p"]])
skalen_scores$Beziehung.4$p
skalen_scores$Beziehung.4
skalen_scores = get_skalen_scores(data = data,
skalen = skalen,
skalen_names =  names(skalen))
skalen_scores$Beziehung.4
data = data
skalen = skalen
skalen_names = "Beziehung.4"
skalen_scores = list()
1:length(skalen_names)
i=1
tmp_ls = list()
tmp = data[,skalen[[skalen_names[i]]]]
na_index = complete.cases(tmp)
na_index
tmp
is.null(dim(tmp))
tmp = tmp[na_index,]
tmp_na = rep(NA, length(na_index))
tmp_na[na_index] = as.numeric(apply(tmp, 1, mean, na.rm=T))
tmp_ls[["scores_mean"]] = tmp_na
tmp_ls[["scores_mean"]]
ncol(tmp) < 3
tmp_jittered = apply(tmp, 2, jitter, factor = 0.01)
fact = factanal(tmp_jittered, 1, scores = "regression")
tmp_na[na_index] = fact$scores
tmp_na
fact$loadings
fact$PVAL
fact
score_name
score_name = "Beziehung.4"
skalen_scores[[score_name]][["p"]]
is.null(skalen_scores[[score_name]][["p"]])
source("C:/Heroes/Funktionen.R")
check_skalen(data=data,
skalen_scores=skalen_scores,
variables=skalen_names,
pred_var=pred_var,
score_type = "scores_fact",
group_names = imp_names)
source("C:/Heroes/Funktionen.R")
check_skalen(data=data,
skalen_scores=skalen_scores,
variables=skalen_names,
pred_var=pred_var,
score_type = "scores_fact",
group_names = imp_names)
source("C:/Heroes/Funktionen.R")
check_skalen(data=data,
skalen_scores=skalen_scores,
variables=skalen_names,
pred_var=pred_var,
score_type = "scores_fact",
group_names = imp_names)
skalen_names
check_skalen(data=data,
skalen_scores=skalen_scores,
variables=names(skalen),
pred_var=pred_var,
score_type = "scores_fact",
group_names = imp_names)
names(skalen)
check_skalen(data=data,
skalen_scores=skalen_scores,
variables=names(skalen)[1:12],
pred_var=pred_var,
score_type = "scores_fact",
group_names = imp_names)
source("C:/Heroes/Funktionen.R")
source("C:/Heroes/keys.R")
data = import_data_surv(Path="C:/Heroes/Downloads soscisurvey/CSV/data_HerOEs_2023-08-27_16-42.csv")
# check_items_by_group(data = data,
#                      variables = names(keys),
#                      group_index = list(1,2,c(3,4,5),3,c(4,5)),
#                      group_names = imp_names[["B102_edit"]][1:5])
skalen_scores = get_skalen_scores(data = data,
skalen = skalen,
skalen_names =  names(skalen))
check_skalen(data=data,
skalen_scores=skalen_scores,
variables=names(skalen)[1:12],
pred_var=pred_var,
score_type = "scores_fact",
group_names = imp_names)
check_skalen(data=data,
skalen_scores=skalen_scores,
variables=names(skalen),
pred_var=pred_var,
score_type = "scores_fact",
group_names = imp_names)
